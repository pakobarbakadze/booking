version: '3.8'

services:
  booking-service:
      build:
        context: .
        dockerfile: ./apps/booking/Dockerfile
        target: ${NODE_ENV}
      container_name: booking-service
      command: npm run start:debug booking
      depends_on:
        - booking-postgres
        - rabbitmq
      env_file:
        - ./apps/booking/.env
      ports:
        - 9229:9229
      volumes:
        - .:/usr/src/app
        - /usr/src/app/node_modules
      restart: always
      networks:
        - network

  auth-service:
      build:
        context: .
        dockerfile: ./apps/auth/Dockerfile
        target: ${NODE_ENV}
      container_name: auth-service
      command: npm run start:debug auth
      depends_on:
        - auth-mongo
        - rabbitmq
      env_file:
        - ./apps/auth/.env
      volumes:
        - .:/usr/src/app
        - /usr/src/app/node_modules
      restart: always
      networks:
        - network

  payments-service:
      build:
        context: .
        dockerfile: ./apps/payments/Dockerfile
        target: ${NODE_ENV}
      container_name: payments-service
      command: npm run start:dev payments
      depends_on:
        - rabbitmq
      env_file:
        - ./apps/payments/.env
      volumes:
        - .:/usr/src/app
        - /usr/src/app/node_modules
      restart: always
      networks:
        - network

  notifications-service:
      build:
        context: .
        dockerfile: ./apps/notifications/Dockerfile
        target: ${NODE_ENV}
      container_name: notifications-service
      command: npm run start:dev notifications
      depends_on:
        - rabbitmq
      env_file:
        - ./apps/notifications/.env
      volumes:
        - .:/usr/src/app
        - /usr/src/app/node_modules
      restart: always
      networks:
        - network

  auth-mongo:
    image: mongo
    container_name: auth-mongo
    ports:
      - ${AUTH_DB_PORT}:${AUTH_DB_PORT}
    volumes:
      - mongodb_data:/var/lib/auth/data
    restart: always
    networks:
      - network

  booking-postgres:
    image: postgres
    container_name: booking-postgres
    environment:
      - POSTGRES_DB=${BOOKING_DB_NAME}
      - POSTGRES_USER=${BOOKING_DB_USER}
      - POSTGRES_PASSWORD=${BOOKING_DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/booking/data
    ports:
      - ${BOOKING_DB_PORT}:${BOOKING_DB_PORT}
    restart: always
    networks:
      - network

  nginx-gateway:
    image: nginx
    container_name: nginx-gateway
    ports:
      - 8000:80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - booking-service
      - auth-service
    networks:
      - network  

  cache:
    image: redis
    container_name: redis-cache
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    networks:
      - network

  rabbitmq:
    image: rabbitmq
    container_name: rabbitmq
    ports:
      - ${RABBITMQ_PORT}:${RABBITMQ_PORT}
    networks:
      - network

  elasticsearch:
    image: elasticsearch:8.12.1
    container_name: elasticsearch
    ports:
      - ${ELASTICSEARCH_PORT}:${ELASTICSEARCH_PORT}
    networks:
      - network

networks:
  network:

volumes:
  mongodb_data:
  postgres_data:

